name: Databricks Asset Bundle Deploy

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_dlt:
        description: 'Deploy DLT Pipeline'
        required: true
        type: boolean
        default: true
      deploy_workflow:
        description: 'Deploy Workflows'
        required: true
        type: boolean
        default: true

env:
  DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
  DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}

jobs:
  # ============================================================================
  # VALIDATION JOB - Run on all branches
  # ============================================================================
  validate:
    name: Validate Bundle Configuration
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: |
          pip install databricks-cli
          databricks --version

      - name: Validate Bundle - Dev
        run: |
          databricks bundle validate -t dev
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}

  # ============================================================================
  # DEPLOY TO DEV - Feature branches and develop
  # ============================================================================
  deploy_dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Extract branch name
        id: branch
        run: |
          # Get branch name and create suffix
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          BRANCH_NAME="${BRANCH_NAME//\//_}"  # Replace / with _
          if [[ "$BRANCH_NAME" == "develop" ]]; then
            SUFFIX=""
          else
            SUFFIX="_${BRANCH_NAME}"
          fi
          echo "suffix=${SUFFIX}" >> $GITHUB_OUTPUT
          echo "Branch suffix: ${SUFFIX}"

      - name: Deploy DLT Only (Feature Branches)
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: |
          databricks bundle deploy -t dev \
            --var="environment_suffix=${{ steps.branch.outputs.suffix }}" \
            --var="deploy_dlt=true" \
            --var="deploy_workflow=false" \
            --var="deploy_dlt_runner=false"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}

      - name: Deploy Full Stack (Develop Branch)
        if: github.ref == 'refs/heads/develop'
        run: |
          databricks bundle deploy -t dev \
            --var="deploy_dlt=true" \
            --var="deploy_workflow=true" \
            --var="deploy_dlt_runner=true"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}

      - name: Get Pipeline ID
        id: pipeline
        run: |
          PIPELINE_ID=$(databricks bundle summary -t dev | grep -A 5 "nyc_taxi_dlt_pipeline" | grep "id:" | awk '{print $2}')
          echo "pipeline_id=${PIPELINE_ID}" >> $GITHUB_OUTPUT
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}

      - name: Run DLT Pipeline (Optional)
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Starting DLT pipeline: ${{ steps.pipeline.outputs.pipeline_id }}"
          databricks pipelines start --pipeline-id ${{ steps.pipeline.outputs.pipeline_id }}
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        continue-on-error: true

  # ============================================================================
  # DEPLOY TO STAGING - On PR to main or manual trigger
  # ============================================================================
  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'pull_request' && github.base_ref == 'main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deployment.outputs.workspace_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Deploy to Staging
        id: deployment
        run: |
          databricks bundle deploy -t staging
          
          # Get workspace URL
          WORKSPACE_URL=$(echo $DATABRICKS_HOST | sed 's/https:\/\///')
          echo "workspace_url=https://${WORKSPACE_URL}" >> $GITHUB_OUTPUT
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STAGING_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STAGING_TOKEN }}

      - name: Run Integration Tests
        run: |
          echo "Running integration tests on staging..."
          # Add your test commands here
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_STAGING_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_STAGING_TOKEN }}

      - name: Post Deployment Summary
        uses: actions/github-script@v7
        with:
          script: |
            const summary = `## Staging Deployment Summary
            
            - ✅ Bundle deployed successfully
            - 🌐 Workspace: ${{ steps.deployment.outputs.workspace_url }}
            - 📊 Environment: Staging
            - 🔗 [View in Databricks](${{ steps.deployment.outputs.workspace_url }})
            `;
            
            if (context.eventName === 'pull_request') {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            }

  # ============================================================================
  # DEPLOY TO PRODUCTION - Main branch only or manual trigger
  # ============================================================================
  deploy_prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod')
    environment:
      name: production
      url: ${{ steps.deployment.outputs.workspace_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Create backup
        run: |
          echo "Creating backup of current production deployment..."
          databricks bundle summary -t prod > backup_prod_$(date +%Y%m%d_%H%M%S).json
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}
        continue-on-error: true

      - name: Deploy to Production
        id: deployment
        run: |
          # Deploy with production settings
          databricks bundle deploy -t prod \
            --var="dlt_continuous=true" \
            --var="dlt_edition=ADVANCED" \
            --var="workflow_schedule_enabled=true"
          
          WORKSPACE_URL=$(echo $DATABRICKS_HOST | sed 's/https:\/\///')
          echo "workspace_url=https://${WORKSPACE_URL}" >> $GITHUB_OUTPUT
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}

      - name: Verify Deployment
        run: |
          echo "Verifying production deployment..."
          databricks bundle summary -t prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_PROD_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_PROD_TOKEN }}

      - name: Send Slack Notification
        if: always()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "Production Deployment ${{ job.status }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Production Deployment*\n:rocket: Status: ${{ job.status }}\n:git: Commit: ${{ github.sha }}\n:link: <${{ steps.deployment.outputs.workspace_url }}|View in Databricks>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # ============================================================================
  # MANUAL DEPLOYMENT - Flexible deployment with custom options
  # ============================================================================
  deploy_manual:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Deploy with Custom Options
        run: |
          DEPLOY_DLT="${{ github.event.inputs.deploy_dlt }}"
          DEPLOY_WORKFLOW="${{ github.event.inputs.deploy_workflow }}"
          
          echo "Deploying with options:"
          echo "  - Deploy DLT: ${DEPLOY_DLT}"
          echo "  - Deploy Workflow: ${DEPLOY_WORKFLOW}"
          
          databricks bundle deploy -t dev \
            --var="deploy_dlt=${DEPLOY_DLT}" \
            --var="deploy_workflow=${DEPLOY_WORKFLOW}"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}

  # ============================================================================
  # CLEANUP - Remove feature branch deployments
  # ============================================================================
  cleanup:
    name: Cleanup Feature Branch
    runs-on: ubuntu-latest
    if: github.event_name == 'delete' && startsWith(github.ref, 'refs/heads/feature/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Databricks CLI
        run: pip install databricks-cli

      - name: Extract branch name
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          BRANCH_NAME="${BRANCH_NAME//\//_}"
          SUFFIX="_${BRANCH_NAME}"
          echo "suffix=${SUFFIX}" >> $GITHUB_OUTPUT

      - name: Destroy Feature Branch Deployment
        run: |
          databricks bundle destroy -t dev \
            --var="environment_suffix=${{ steps.branch.outputs.suffix }}" \
            --auto-approve
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_DEV_HOST }}
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_DEV_TOKEN }}
        continue-on-error: true

  # ============================================================================
  # COST REPORT - Estimate deployment costs (optional)
  # ============================================================================
  cost_estimate:
    name: Cost Estimation
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Estimate Costs
        run: |
          echo "## Cost Estimation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Configuration | Est. Cost/Hour |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------------|----------------|" >> $GITHUB_STEP_SUMMARY
          echo "| DLT Pipeline | Serverless ADVANCED | \$8-12 |" >> $GITHUB_STEP_SUMMARY
          echo "| Workflow Jobs | Serverless | \$2-4 |" >> $GITHUB_STEP_SUMMARY
          echo "| Storage (Unity Catalog) | Per TB | \$0.02/GB |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ Costs are estimates. Actual costs may vary based on usage patterns." >> $GITHUB_STEP_SUMMARY