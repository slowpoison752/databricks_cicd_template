name: Databricks CI/CD - Unity Catalog + Serverless

on:
  push:
    branches:
      - main
      - develop
      - master
      - 'feature/**'
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
      deploy_dlt:
        description: 'Deploy DLT Pipeline'
        required: true
        type: boolean
        default: true
      deploy_workflow:
        description: 'Deploy Workflows'
        required: true
        type: boolean
        default: true

jobs:
  # ===========================================================================
  # VALIDATE - Run on all branches
  # ===========================================================================
  validate:
    name: Validate Bundle
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Validate Bundle Configuration
        run: databricks bundle validate -t dev
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.DATABRICKS_DEV_TENANT_ID }}
          ARM_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}

  # ===========================================================================
  # DEPLOY DEV - Feature branches (DLT only) and develop (full)
  # ===========================================================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name == 'push' && 
      (github.ref == 'refs/heads/develop' || 
       github.ref == 'refs/heads/master' ||
       startsWith(github.ref, 'refs/heads/feature/'))

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Extract branch info
        id: branch
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          
          # Create clean suffix from branch name
          if [[ "$BRANCH_NAME" == "develop" ]] || [[ "$BRANCH_NAME" == "master" ]]; then
            SUFFIX=""
            IS_FEATURE="false"
          else
            # Remove 'feature/' prefix and sanitize
            CLEAN_NAME=$(echo "$BRANCH_NAME" | sed 's|feature/||' | sed 's|[^a-zA-Z0-9]|_|g' | cut -c1-20)
            SUFFIX="_${CLEAN_NAME}"
            IS_FEATURE="true"
          fi
          
          echo "suffix=${SUFFIX}" >> $GITHUB_OUTPUT
          echo "is_feature=${IS_FEATURE}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          
          echo "### Deployment Info" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${BRANCH_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "- Suffix: ${SUFFIX}" >> $GITHUB_STEP_SUMMARY
          echo "- Is Feature: ${IS_FEATURE}" >> $GITHUB_STEP_SUMMARY

      - name: Deploy DLT Only (Feature Branches)
        if: steps.branch.outputs.is_feature == 'true'
        run: |
          echo "🚀 Deploying DLT only for feature branch"
          
          databricks bundle deploy -t dev \
            --var="environment_suffix=${{ steps.branch.outputs.suffix }}" \
            --var="deploy_dlt=true" \
            --var="deploy_workflow=false" \
            --var="deploy_dlt_runner=false"
          
          echo "✅ DLT pipeline deployed with suffix: ${{ steps.branch.outputs.suffix }}"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}

      - name: Deploy Full Stack (Develop/Master)
        if: steps.branch.outputs.is_feature == 'false'
        run: |
          echo "🚀 Deploying full stack (DLT + Workflows)"
          
          databricks bundle deploy -t dev \
            --var="deploy_dlt=true" \
            --var="deploy_workflow=true" \
            --var="deploy_dlt_runner=true"
          
          echo "✅ Full deployment complete"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}

      - name: Get Deployment Summary
        id: summary
        run: |
          echo "📊 Deployment Summary:"
          databricks bundle summary -t dev \
            --var="environment_suffix=${{ steps.branch.outputs.suffix }}"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}
        continue-on-error: true

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const suffix = '${{ steps.branch.outputs.suffix }}';
            const isFeature = '${{ steps.branch.outputs.is_feature }}' === 'true';
            
            const deployType = isFeature ? 'DLT Pipeline Only' : 'Full Stack (DLT + Workflows)';
            const schema = isFeature ? `nyc_taxi${suffix}` : 'nyc_taxi';
            
            const comment = `## 🚀 Databricks Deployment
            
            **Environment:** Development
            **Type:** ${deployType}
            **Schema:** \`dev_catalog.${schema}\`
            
            ${isFeature ? '💡 Feature branches deploy DLT only for faster iterations and cost savings.' : ''}
            
            [View in Databricks Workspace](${{ secrets.DATABRICKS_HOST }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ===========================================================================
  # DEPLOY STAGING - On PR to main
  # ===========================================================================
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'pull_request' && 
       (github.base_ref == 'main' || github.base_ref == 'master')) ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ secrets.DATABRICKS_HOST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Deploy to Staging
        run: |
          echo "🚀 Deploying to Staging"
          
          databricks bundle deploy -t staging
          
          echo "✅ Staging deployment complete"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_STAGING_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_STAGING_CLIENT_SECRET }}

      - name: Run Integration Tests
        run: |
          echo "🧪 Running integration tests..."
          
          # Get pipeline ID
          PIPELINE_ID=$(databricks pipelines list | grep "NYC Taxi DLT Pipeline" | head -1 | awk '{print $1}' || echo "")
          
          if [ -n "$PIPELINE_ID" ]; then
            echo "Starting DLT pipeline: $PIPELINE_ID"
            databricks pipelines start --pipeline-id $PIPELINE_ID || true
            sleep 30
            echo "✅ Pipeline started"
          else
            echo "⚠️ Pipeline not found"
          fi
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_STAGING_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_STAGING_CLIENT_SECRET }}
        continue-on-error: true

  # ===========================================================================
  # DEPLOY PRODUCTION - On merge to main
  # ===========================================================================
  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: validate
    if: |
      (github.event_name == 'push' && 
       (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) ||
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'prod')
    environment:
      name: production
      url: ${{ secrets.DATABRICKS_HOST }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Create Backup
        run: |
          echo "💾 Creating backup of current production"
          databricks bundle summary -t prod > backup_prod_$(date +%Y%m%d_%H%M%S).json || true
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_CLIENT_SECRET }}
        continue-on-error: true

      - name: Deploy to Production
        run: |
          echo "🚀 Deploying to Production"
          
          databricks bundle deploy -t prod
          
          echo "✅ Production deployment complete"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_CLIENT_SECRET }}

      - name: Verify Deployment
        run: |
          echo "✅ Verifying production deployment..."
          databricks bundle summary -t prod
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_PROD_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_PROD_CLIENT_SECRET }}

      - name: Create GitHub Release (Optional)
        if: github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `release-${new Date().toISOString().split('T')[0]}`;
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: tag,
              name: `Production Release ${tag}`,
              body: `Automated production deployment\n\nCommit: ${context.sha}`,
              draft: false,
              prerelease: false
            });
        continue-on-error: true

  # ===========================================================================
  # MANUAL DEPLOYMENT - For custom deployments
  # ===========================================================================
  deploy-manual:
    name: Manual Deployment
    runs-on: ubuntu-latest
    needs: validate
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'dev'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Deploy with Custom Options
        run: |
          DEPLOY_DLT="${{ github.event.inputs.deploy_dlt }}"
          DEPLOY_WORKFLOW="${{ github.event.inputs.deploy_workflow }}"
          
          echo "🚀 Manual Deployment"
          echo "  - Environment: dev"
          echo "  - Deploy DLT: ${DEPLOY_DLT}"
          echo "  - Deploy Workflow: ${DEPLOY_WORKFLOW}"
          
          databricks bundle deploy -t dev \
            --var="deploy_dlt=${DEPLOY_DLT}" \
            --var="deploy_workflow=${DEPLOY_WORKFLOW}"
          
          echo "✅ Manual deployment complete"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}

  # ===========================================================================
  # CLEANUP - Remove feature branch deployments
  # ===========================================================================
  cleanup:
    name: Cleanup Feature Branch
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'pull_request' && 
      github.event.action == 'closed' &&
      startsWith(github.head_ref, 'feature/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Databricks CLI
        uses: databricks/setup-cli@main

      - name: Extract branch info
        id: branch
        run: |
          BRANCH_NAME="${{ github.head_ref }}"
          CLEAN_NAME=$(echo "$BRANCH_NAME" | sed 's|feature/||' | sed 's|[^a-zA-Z0-9]|_|g' | cut -c1-20)
          SUFFIX="_${CLEAN_NAME}"
          echo "suffix=${SUFFIX}" >> $GITHUB_OUTPUT
          echo "Cleaning up: ${SUFFIX}"

      - name: Destroy Feature Environment
        run: |
          echo "🧹 Cleaning up feature branch deployment"
          
          databricks bundle destroy -t dev \
            --var="environment_suffix=${{ steps.branch.outputs.suffix }}" \
            --auto-approve
          
          echo "✅ Cleanup complete"
        env:
          DATABRICKS_HOST: ${{ secrets.DATABRICKS_HOST }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_DEV_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_DEV_CLIENT_SECRET }}
        continue-on-error: true